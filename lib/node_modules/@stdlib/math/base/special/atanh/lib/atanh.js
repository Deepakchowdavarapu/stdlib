/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isnan = require( '@stdlib/math-base-assert-is-nan' );
var log1p = require( '@stdlib/math-base-special-log1p' );
var PINF = require( '@stdlib/constants-float64-pinf' );
var NINF = require( '@stdlib/constants-float64-ninf' );


// MAIN //

/**
* Computes the hyperbolic arctangent of a number.
*
* @param {number} x - input value
* @returns {number} hyperbolic arctangent
*
* @example
* var v = atanh( 0.5 );
* // returns ~0.549
*
* @example
* var v = atanh( 0.0 );
* // returns 0.0
*
* @example
* var v = atanh( -0.0 );
* // returns -0.0
*
* @example
* var v = atanh( 1.0 );
* // returns Infinity
*
* @example
* var v = atanh( -1.0 );
* // returns -Infinity
*
* @example
* var v = atanh( 2.0 );
* // returns NaN
*
* @example
* var v = atanh( NaN );
* // returns NaN
*/
function atanh( x ) {
	var ax;
	if ( isnan( x ) || x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return PINF;
	}
	if ( x === -1.0 ) {
		return NINF;
	}
	ax = ( x < 0.0 ) ? -x : x;
	if ( ax < 0.5 ) {
		return x + ( x * x * x / 3.0 );
	}
	return 0.5 * log1p( ( 2.0 * x ) / ( 1.0 - x ) );
}


// EXPORTS //

module.exports = atanh;